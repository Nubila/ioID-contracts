{
  "manifestVersion": "3.2",
  "proxies": [
    {
      "address": "0x1b8523f234495ceeC25742537d8b7427179944fE",
      "txHash": "0x0fdc4d80a79807c4f85cb7b3da761d3a887ea81e0dade4f0cf4651158151dacc",
      "kind": "transparent"
    },
    {
      "address": "0x2F9bb7c12b876981BAAb8a42dCDfEC3AF89eA5bD",
      "txHash": "0xc31eabb4e8856359d8980a1b46dff8c0a04441443ac5ed8de9d3069f6743bb19",
      "kind": "transparent"
    },
    {
      "address": "0x95bB9c6E32f208b96c4E9c9dC05039167Fe25fB4",
      "txHash": "0x232804fbcf3666771b0001d28889431125353a6b894ef7cd1199272f45523e32",
      "kind": "transparent"
    }
  ],
  "impls": {
    "bd559bc40504441745ede026becfed0c57d0b03f90d52222cdf0d40c3bf327dd": {
      "address": "0x73CfdE961961898F5EeF9FB35374c782452c9aD8",
      "txHash": "0xe1ea8e7893eb913a315af9cbc406590ae5885adb706f1d88628eb70ae924dcbd",
      "layout": {
        "solcVersion": "0.8.19",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "51",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "52",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "project",
            "offset": 0,
            "slot": "101",
            "type": "t_address",
            "contract": "ioIDFactory",
            "src": "contracts/ioIDFactory.sol:11"
          },
          {
            "label": "ioIDRegistry",
            "offset": 0,
            "slot": "102",
            "type": "t_address",
            "contract": "ioIDFactory",
            "src": "contracts/ioIDFactory.sol:12"
          },
          {
            "label": "price",
            "offset": 0,
            "slot": "103",
            "type": "t_uint256",
            "contract": "ioIDFactory",
            "src": "contracts/ioIDFactory.sol:13"
          },
          {
            "label": "projectDeviceNFTContract",
            "offset": 0,
            "slot": "104",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ioIDFactory",
            "src": "contracts/ioIDFactory.sol:14"
          },
          {
            "label": "deviceNFTContractProject",
            "offset": 0,
            "slot": "105",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ioIDFactory",
            "src": "contracts/ioIDFactory.sol:15"
          },
          {
            "label": "projectAppliedAmount",
            "offset": 0,
            "slot": "106",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ioIDFactory",
            "src": "contracts/ioIDFactory.sol:16"
          },
          {
            "label": "projectActivedAmount",
            "offset": 0,
            "slot": "107",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ioIDFactory",
            "src": "contracts/ioIDFactory.sol:17"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {}
      }
    },
    "da3bca0c985291f5f65d20534c93e37a506bf99bb16716950d5f85d0b67cf42b": {
      "address": "0xce174FfbB248D0b3f008dF692227eaAeDA155e85",
      "txHash": "0xd3d5896aa03e1f4910f7e38edbffd382caf0c845458807248453a0ad0a93a3c9",
      "layout": {
        "solcVersion": "0.8.19",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "101",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "102",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "103",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "104",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "105",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "106",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "107",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:477"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:17"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "152",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:20"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "153",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:23"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "154",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:26"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "155",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:171"
          },
          {
            "label": "nextId",
            "offset": 0,
            "slot": "201",
            "type": "t_uint256",
            "contract": "ioID",
            "src": "contracts/ioID.sol:15"
          },
          {
            "label": "minter",
            "offset": 0,
            "slot": "202",
            "type": "t_address",
            "contract": "ioID",
            "src": "contracts/ioID.sol:16"
          },
          {
            "label": "walletRegistry",
            "offset": 0,
            "slot": "203",
            "type": "t_address",
            "contract": "ioID",
            "src": "contracts/ioID.sol:17"
          },
          {
            "label": "walletImplementation",
            "offset": 0,
            "slot": "204",
            "type": "t_address",
            "contract": "ioID",
            "src": "contracts/ioID.sol:18"
          },
          {
            "label": "ioIDFactory",
            "offset": 0,
            "slot": "205",
            "type": "t_address",
            "contract": "ioID",
            "src": "contracts/ioID.sol:19"
          },
          {
            "label": "_wallets",
            "offset": 0,
            "slot": "206",
            "type": "t_mapping(t_bytes32,t_address)",
            "contract": "ioID",
            "src": "contracts/ioID.sol:21"
          },
          {
            "label": "_devices",
            "offset": 0,
            "slot": "207",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ioID",
            "src": "contracts/ioID.sol:22"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_address)": {
            "label": "mapping(bytes32 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {}
      }
    },
    "8295a63b4d8604467623e6561a75b695cde3e38017bdfcdd98461eaccb40b1d3": {
      "address": "0xe2392D03E500ea9168768aC6e0b7Eb6ae79054AC",
      "txHash": "0x4ca5837961d9461c45359d2ea89b083c008d1c85dc972ad529a1609900a217cd",
      "layout": {
        "solcVersion": "0.8.19",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
          },
          {
            "label": "DOMAIN_SEPARATOR",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32",
            "contract": "ioIDRegistry",
            "src": "contracts/ioIDRegistry.sol:24"
          },
          {
            "label": "_nonces",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_struct(Counter)5026_storage)",
            "contract": "ioIDRegistry",
            "src": "contracts/ioIDRegistry.sol:28"
          },
          {
            "label": "records",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_struct(Record)7435_storage)",
            "contract": "ioIDRegistry",
            "src": "contracts/ioIDRegistry.sol:35"
          },
          {
            "label": "ids",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ioIDRegistry",
            "src": "contracts/ioIDRegistry.sol:36"
          },
          {
            "label": "registeredNFT",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "contract": "ioIDRegistry",
            "src": "contracts/ioIDRegistry.sol:37"
          },
          {
            "label": "ioIDFactory",
            "offset": 0,
            "slot": "6",
            "type": "t_address",
            "contract": "ioIDRegistry",
            "src": "contracts/ioIDRegistry.sol:38"
          },
          {
            "label": "ioID",
            "offset": 0,
            "slot": "7",
            "type": "t_address",
            "contract": "ioIDRegistry",
            "src": "contracts/ioIDRegistry.sol:39"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Counter)5026_storage)": {
            "label": "mapping(address => struct Counters.Counter)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Record)7435_storage)": {
            "label": "mapping(address => struct ioIDRegistry.Record)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Counter)5026_storage": {
            "label": "struct Counters.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Record)7435_storage": {
            "label": "struct ioIDRegistry.Record",
            "members": [
              {
                "label": "hash",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "uri",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {}
      }
    }
  }
}
